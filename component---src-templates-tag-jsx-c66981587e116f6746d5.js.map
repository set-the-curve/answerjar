{"version":3,"sources":["webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/templates/tag.jsx"],"names":["PostListing","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","title","date","excerpt","timeToRead","render","className","map","post","to","key","React","Component","TagTemplate","pageContext","data","tag","allMarkdownRemark","edges","config","siteTitle","pageQuery"],"mappings":"2JAIMA,E,0GACJC,YAAA,WACE,IAAMC,EAAW,GAYjB,OAXAC,KAAKC,MAAMC,UAAUC,SAAQ,SAAAC,GAC3BL,EAASM,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,MAAOR,EAASG,KAAKI,YAAYC,MACjCC,MAAOT,EAASG,KAAKI,YAAYE,MACjCC,KAAMV,EAASG,KAAKC,OAAOM,KAC3BC,QAASX,EAASG,KAAKQ,QACvBC,WAAYZ,EAASG,KAAKS,gBAGvBjB,G,EAGTkB,OAAA,WACE,IAAMlB,EAAWC,KAAKF,cACtB,OACE,yBAAKoB,UAAU,oBAEbnB,EAASoB,KAAI,SAAAC,GAAI,OACf,oCACE,kBAAC,OAAD,CAAMF,UAAU,eAAeG,GAAID,EAAKd,KAAMgB,IAAKF,EAAKP,OACtD,4BAAKO,EAAKP,QAEZ,kBAAC,IAAD,CAAUH,KAAMU,EAAKV,a,GA3BPa,IAAMC,WAoCjB3B,O,kCCxCf,2KAOe,SAAS4B,EAAT,GAA6C,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KACzCC,EAAQF,EAARE,IACF1B,EAAYyB,EAAKE,kBAAkBC,MACzC,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,iBACb,kBAAC,IAAD,CAAQL,MAAK,oBAAsBe,EAAtB,OAAgCG,IAAOC,YACpD,4CAAkBJ,GAClB,kBAAC,IAAD,CAAa1B,UAAWA,MAOzB,IAAM+B,EAAS","file":"component---src-templates-tag-jsx-c66981587e116f6746d5.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\nimport PostTags from \"../PostTags/PostTags\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"post-listing-top\">\n        {/* Your post list here. */\n        postList.map(post => (\n          <>\n            <Link className=\"post-listing\" to={post.path} key={post.title}>\n              <h3>{post.title}</h3>\n            </Link>\n            <PostTags tags={post.tags} />\n          </>\n        ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\n\nexport default function TagTemplate({ pageContext, data }) {\n  const { tag } = pageContext;\n  const postEdges = data.allMarkdownRemark.edges;\n  return (\n    <Layout>\n      <div className=\"tag-container\">\n        <Helmet title={`Posts tagged as \"${tag}\" | ${config.siteTitle}`} />\n        <h1>Category: {`${tag}`}</h1>\n        <PostListing postEdges={postEdges} />\n      </div>\n    </Layout>\n  );\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}