{"version":3,"sources":["webpack:///./src/templates/listing.jsx","webpack:///./src/components/PostListing/PostListing.jsx"],"names":["Listing","pageContext","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","listingQuery","PostListing","getPostList","postList","this","props","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","cover","date","excerpt","timeToRead","render","map","post","to","key","React","Component"],"mappings":"gRAqDeA,UA5Cf,YAAwC,EAArBC,YA2BjB,IAAMC,EA3BgC,EAARC,KA2BPC,kBAAkBC,MAEzC,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,wBAAIH,UAAU,kBAAd,eACA,kBAAC,IAAD,CAAaJ,UAAWA,QAW3B,IAAMQ,EAAY,c,iGCpDnBC,E,0GACJC,YAAA,WACE,IAAMC,EAAW,GAYjB,OAXAC,KAAKC,MAAMb,UAAUc,SAAQ,SAAAC,GAC3BJ,EAASK,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAChCE,MAAOR,EAASG,KAAKI,YAAYC,MACjClB,MAAOU,EAASG,KAAKI,YAAYjB,MACjCmB,KAAMT,EAASG,KAAKC,OAAOK,KAC3BC,QAASV,EAASG,KAAKO,QACvBC,WAAYX,EAASG,KAAKQ,gBAGvBf,G,EAGTgB,OAAA,WACE,IAAMhB,EAAWC,KAAKF,cACtB,OACE,yBAAKN,UAAU,oBAEbO,EAASiB,KAAI,SAAAC,GAAI,OACf,oCACE,kBAAC,OAAD,CAAMzB,UAAU,eAAe0B,GAAID,EAAKZ,KAAMc,IAAKF,EAAKxB,OACtD,4BAAKwB,EAAKxB,QAEZ,kBAAC,IAAD,CAAUgB,KAAMQ,EAAKR,a,GA3BPW,IAAMC,WAoCjBxB,O","file":"component---src-templates-listing-jsx-03e83b91198d0e6ab185.js","sourcesContent":["import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../layout\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\nimport \"./listing.css\";\n\nfunction Listing({ pageContext, data }) {\n  function renderPaging() {\n    const { currentPageNum, pageCount } = pageContext;\n    const prevPage = currentPageNum - 1 === 1 ? \"/\" : `/${currentPageNum - 1}/`;\n    const nextPage = `/${currentPageNum + 1}/`;\n    const isFirstPage = currentPageNum === 1;\n    const isLastPage = currentPageNum === pageCount;\n\n    return (\n      <div className=\"paging-container\">\n        {!isFirstPage && <Link to={prevPage}>Previous</Link>}\n        {[...Array(pageCount)].map((_val, index) => {\n          const pageNum = index + 1;\n          return (\n            <Link\n              key={`listing-page-${pageNum}`}\n              to={pageNum === 1 ? \"/\" : `/${pageNum}/`}\n            >\n              {pageNum}\n            </Link>\n          );\n        })}\n        {!isLastPage && <Link to={nextPage}>Next</Link>}\n      </div>\n    );\n  }\n\n  const postEdges = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout>\n      <div className=\"listing-container\">\n        <div className=\"posts-container\">\n          <Helmet title={config.siteTitle} />\n          <SEO />\n          <h1 className=\"listing-header\">Top Answers</h1>\n          <PostListing postEdges={postEdges} />\n        </div>\n        {/*{renderPaging()}*/}\n      </div>\n    </Layout>\n  );\n}\n\nexport default Listing;\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n  query ListingQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [fields___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport PostTags from \"../PostTags/PostTags\";\n\nclass PostListing extends React.Component {\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"post-listing-top\">\n        {/* Your post list here. */\n        postList.map(post => (\n          <>\n            <Link className=\"post-listing\" to={post.path} key={post.title}>\n              <h3>{post.title}</h3>\n            </Link>\n            <PostTags tags={post.tags} />\n          </>\n        ))\n        }\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n"],"sourceRoot":""}